openapi: 3.1.0
info:
  title: Product API
  description: API for managing product catalog
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
    url: https://example.com/support
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server
  - url: https://dev-api.example.com/v1
    description: Development server

tags:
  - name: products
    description: Everything about products
  - name: categories
    description: Operations about product categories

paths:
  /products:
    get:
      tags:
        - products
      summary: List all products
      description: Returns a list of products with optional filtering
      operationId: listProducts
      parameters:
        - name: category
          in: query
          description: Filter by category
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  total:
                    type: integer
                    format: int32
                    description: Total number of items
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - products
      summary: Create a new product
      description: Add a new product to the catalog
      operationId: createProduct
      requestBody:
        description: Product object that needs to be added to the catalog
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Product already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{productId}:
    get:
      tags:
        - products
      summary: Get product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - products
      summary: Update an existing product
      description: Update the product with the specified ID
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          description: ID of product to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated product object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - products
      summary: Delete a product
      description: Delete the product with the specified ID
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: ID of product to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories:
    get:
      tags:
        - categories
      summary: List all categories
      description: Returns a list of product categories
      operationId: listCategories
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

components:
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - price
        - status
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the product
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the product
          example: "Smartphone XYZ"
          maxLength: 100
        description:
          type: string
          description: Detailed description of the product
          example: "Latest smartphone with advanced features"
        price:
          type: number
          format: double
          description: Price of the product
          example: 799.99
          minimum: 0
        categoryId:
          type: string
          format: uuid
          description: Category ID this product belongs to
          example: "123e4567-e89b-12d3-a456-426614174001"
        tags:
          type: array
          description: Tags associated with the product
          items:
            type: string
            example: "electronics"
        imageUrl:
          type: string
          format: uri
          description: URL to the product image
          example: "https://example.com/images/product1.jpg"
        status:
          type: string
          description: Product status in the catalog
          enum:
            - available
            - low_stock
            - out_of_stock
            - discontinued
          example: "available"
        createdAt:
          type: string
          format: date-time
          description: Date and time when the product was created
          example: "2023-01-15T14:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the product was last updated
          example: "2023-02-10T09:15:00Z"

    NewProduct:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          description: Name of the product
          example: "Smartphone XYZ"
          maxLength: 100
        description:
          type: string
          description: Detailed description of the product
          example: "Latest smartphone with advanced features"
        price:
          type: number
          format: double
          description: Price of the product
          example: 799.99
          minimum: 0
        categoryId:
          type: string
          format: uuid
          description: Category ID this product belongs to
          example: "123e4567-e89b-12d3-a456-426614174001"
        tags:
          type: array
          description: Tags associated with the product
          items:
            type: string
            example: "electronics"
        imageUrl:
          type: string
          format: uri
          description: URL to the product image
          example: "https://example.com/images/product1.jpg"
        status:
          type: string
          description: Product status in the catalog
          enum:
            - available
            - low_stock
            - out_of_stock
            - discontinued
          default: "available"

    Category:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the category
          example: "123e4567-e89b-12d3-a456-426614174001"
        name:
          type: string
          description: Name of the category
          example: "Electronics"
          maxLength: 50
        description:
          type: string
          description: Description of the category
          example: "Electronic devices and gadgets"

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
          example: "INVALID_INPUT"
        message:
          type: string
          description: Error message
          example: "Invalid input data provided"
        details:
          type: array
          description: Detailed error information
          items:
            type: object
            properties:
              field:
                type: string
                description: The field that caused the error
                example: "price"
              message:
                type: string
                description: Error message for this field
                example: "Price must be greater than 0"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
